import os
from datetime import datetime, timezone, timedelta
from typing import List, Optional, Tuple

from aiogram import Bot
from aiogram.types import InputMediaPhoto, FSInputFile
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy import select, update

from database.base import async_session
from database.models import Prize, Ticket
from utils.formatting import format_price
from utils.logger import logger


def make_naive(dt: datetime) -> datetime:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º (aware) –≤ –¥–∞—Ç—É –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (naive).
    """
    if dt.tzinfo is not None:
        return dt.replace(tzinfo=None)
    return dt


def convert_to_moscow_time(dt: datetime) -> datetime:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ UTC –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3).
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –¥–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    if dt.tzinfo is None:
        # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ UTC
        dt = dt.replace(tzinfo=timezone.utc)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)
    moscow_offset = timedelta(hours=3)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_time = dt.astimezone(timezone(moscow_offset))
    
    return moscow_time


async def get_active_prize() -> Optional[Prize]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    async with async_session() as session:
        query = select(Prize).where(Prize.is_active == True)
        result = await session.execute(query)
        return result.scalar_one_or_none()


async def get_pending_prize() -> Optional[Prize]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å—Å—è (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –Ω–æ –æ–Ω –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω).
    """
    async with async_session() as session:
        now = make_naive(datetime.now())
        
        query = select(Prize).where(
            (Prize.is_active == False) & 
            (Prize.winner_determined == False) & 
            (Prize.start_date <= now) & 
            (Prize.end_date > now)
        ).order_by(Prize.start_date)
        
        result = await session.execute(query)
        pending_prize = result.scalar_one_or_none()
        
        return pending_prize


async def get_available_ticket_numbers(prize_id: int) -> List[int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.
    """
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤
        prize_query = select(Prize).where(Prize.id == prize_id)
        prize_result = await session.execute(prize_query)
        prize = prize_result.scalar_one_or_none()
        
        if not prize:
            logger.error(f"–†–æ–∑—ã–≥—Ä—ã—à —Å ID {prize_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        query = select(Ticket).where(Ticket.prize_id == prize_id)
        result = await session.execute(query)
        tickets = result.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –±–∏–ª–µ—Ç–æ–≤
        all_numbers = set(range(1, prize.ticket_count + 1))
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ)
        unavailable = {ticket.ticket_number for ticket in tickets 
                      if ticket.is_paid or ticket.is_reserved}
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
        return sorted(all_numbers - unavailable)


def format_ticket_numbers_for_message(ticket_numbers: List[int]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    """
    if not ticket_numbers:
        return "–í—Å–µ –±–∏–ª–µ—Ç—ã –ø—Ä–æ–¥–∞–Ω—ã –∏–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã"
    
    # –í—ã–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
    return " ".join(map(str, sorted(ticket_numbers)))


async def format_prize_message(prize: Prize, bot_username: str) -> Tuple[str, Optional[str]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤
    available_tickets = await get_available_ticket_numbers(prize.id)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    start_date_moscow = convert_to_moscow_time(prize.start_date)
    end_date_moscow = convert_to_moscow_time(prize.end_date)
    
    start_date = start_date_moscow.strftime("%d.%m.%Y %H:%M")
    end_date = end_date_moscow.strftime("%d.%m.%Y %H:%M")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞
    ticket_price = format_price(prize.ticket_price)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤
    formatted_tickets = format_ticket_numbers_for_message(available_tickets)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"üéâ –ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!\n\n"
        f"üèÜ –ü—Ä–∏–∑: {prize.title}\n"
        f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
        f"üîö –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: {ticket_price}\n\n"
        f"üé´ –°–≤–æ–±–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {formatted_tickets}\n\n"
        f"üîó –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã: https://t.me/{bot_username}?start=0"
    )
    
    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    image_path = None
    if prize.image:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
        if os.path.isabs(prize.image):
            image_path = prize.image
        else:
            # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /app/media/
            image_path = os.path.join('/app/media', prize.image)
    
    return message_text, image_path


async def send_prize_announcement(bot: Bot, prize: Prize) -> Optional[int]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤ —á–∞—Ç.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        chat_id = os.getenv("CHANNEL_ID")
        if not chat_id:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω CHANNEL_ID –≤ .env")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text, image_path = await format_prize_message(prize, bot_username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if image_path and os.path.exists(image_path):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            photo = FSInputFile(image_path)
            message = await bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=message_text
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await bot.send_message(
                chat_id=chat_id,
                text=message_text
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        return message.message_id
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: {e}")
        return None


async def update_prize_announcement(bot: Bot, prize: Prize) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤ —á–∞—Ç–µ.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
        if not prize.chat_message_id:
            logger.error(f"–ù–µ —É–∫–∞–∑–∞–Ω chat_message_id –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {prize.id}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        chat_id = os.getenv("CHANNEL_ID")
        if not chat_id:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω CHANNEL_ID –≤ .env")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text, image_path = await format_prize_message(prize, bot_username)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if image_path and os.path.exists(image_path):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            photo = FSInputFile(image_path)
            await bot.edit_message_media(
                chat_id=chat_id,
                message_id=prize.chat_message_id,
                media=InputMediaPhoto(
                    media=photo,
                    caption=message_text
                )
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=prize.chat_message_id,
                text=message_text
            )
        
        return True
    
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return True
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: {e}")
        return False


async def deactivate_all_active_prizes() -> None:
    """
    –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏,
    –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
    """
    async with async_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
        query = select(Prize).where(Prize.is_active == True)
        result = await session.execute(query)
        active_prizes = result.scalars().all()
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
        for prize in active_prizes:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à
            now = make_naive(datetime.now())
            prize_end_date = make_naive(prize.end_date)
            
            if prize_end_date <= now:
                prize.is_active = False

                session.add(prize)
                logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à {prize.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if active_prizes:
            await session.commit()


async def check_and_announce_prizes(bot: Bot) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
        await deactivate_all_active_prizes()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
        active_prize = await get_active_prize()
        
        if active_prize:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if active_prize.chat_message_id:
                await update_prize_announcement(bot, active_prize)
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                async with async_session() as session:
                    message_id = await send_prize_announcement(bot, active_prize)
                    if message_id:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                        active_prize.chat_message_id = message_id
                        session.add(active_prize)
                        await session.commit()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å—Å—è
            pending_prize = await get_pending_prize()
            
            if pending_prize:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                async with async_session() as session:
                    pending_prize.is_active = True
                    session.add(pending_prize)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_id = await send_prize_announcement(bot, pending_prize)
                    if message_id:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                        pending_prize.chat_message_id = message_id
                        session.add(pending_prize)
                    
                    await session.commit()
                    logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à {pending_prize.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {e}")
        # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä async_session
