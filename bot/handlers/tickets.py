from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Ticket, TelegramUser
from sqlalchemy.future import select
import asyncio
from datetime import datetime
from sqlalchemy import and_

from utils.logger import logger
from utils.formatting import format_price, format_ticket_numbers
from database import get_active_prize, get_available_tickets, reserve_tickets, parse_ticket_numbers, cancel_all_reservations
from database.base import async_session
from services.payment_service import init_payment, check_payment_status, update_tickets_payment_status, get_payment_by_id
from keyboards import get_cancel_keyboard, get_back_keyboard, get_payment_keyboard
from services.payment_service import update_tickets_payment_status
from database.user_repository import get_or_create_user


class TicketStates(StatesGroup):
    waiting_for_ticket_numbers = State()


tickets_router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
reservation_timers = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
payment_check_timers = {}


async def cancel_reservation_after_timeout(user_id: int, message: Message):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é –±–∏–ª–µ—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã
        await asyncio.sleep(120)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –æ–ø–ª–∞—á–µ–Ω–∞
        success, message_text = await cancel_all_reservations(user_id)
        
        if success and "–û—Ç–º–µ–Ω–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏" in message_text:
            await message.edit_text(
                "‚è± –í—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –±–∏–ª–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_back_keyboard()
            )
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏: {e}")
    finally:
        if user_id in reservation_timers:
            del reservation_timers[user_id]


async def check_payment_status_periodically(payment_id: str, user_id: int, message: Message):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
        for _ in range(60):  # 15 –º–∏–Ω—É—Ç = 60 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ 15 —Å–µ–∫—É–Ω–¥
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment_info = await check_payment_status(payment_id)
            
            if not payment_info:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ {payment_id}")
                await asyncio.sleep(15)
                continue
            
            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if payment_info["status"] == "succeeded":
                async with async_session() as session:
                    success, tickets = await update_tickets_payment_status(session, payment_id, "succeeded")
                    
                    if success:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                        payment_data = await get_payment_by_id(session, payment_id)
                        
                        if payment_data:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤
                            formatted_tickets = format_ticket_numbers(payment_data["tickets"])
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await message.edit_text(
                                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                                f"üéü –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã: {formatted_tickets}\n\n"
                                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏! üçÄ",
                                parse_mode="Markdown",
                                reply_markup=get_back_keyboard()
                            )
                            
                            logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            
                            # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                            if payment_id in payment_check_timers:
                                del payment_check_timers[payment_id]
                            
                            return
            
            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif payment_info["status"] in ["canceled", "failed"]:
                await message.edit_text(
                    "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª—Å—è.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –±–∏–ª–µ—Ç—ã.",
                    reply_markup=get_back_keyboard()
                )
                
                logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                if payment_id in payment_check_timers:
                    del payment_check_timers[payment_id]
                
                return
            
            # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(15)
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ 15 –º–∏–Ω—É—Ç, –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
        await cancel_all_reservations(user_id)
        
        await message.edit_text(
            "‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –±–∏–ª–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –±–∏–ª–µ—Ç—ã.",
            reply_markup=get_back_keyboard()
        )
        
        logger.info(f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if payment_id in payment_check_timers:
            del payment_check_timers[payment_id]


@tickets_router.callback_query(F.data == "buy_tickets")
async def buy_ticket(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö.
    """
    user = callback.from_user
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user.id in reservation_timers:
        reservation_timers[user.id].cancel()
        del reservation_timers[user.id]
    
    await cancel_all_reservations(user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.full_name}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã'")

    prize = await get_active_prize()
    
    if not prize:
        await callback.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", show_alert=True)
        return
    
    available_tickets = await get_available_tickets(prize["id"])
    
    if not available_tickets:
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à
    is_free_prize = prize["ticket_price"] is None or float(prize["ticket_price"] or 0) == 0
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
    formatted_tickets = format_ticket_numbers(available_tickets)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞
    formatted_price = format_price(prize["ticket_price"] or 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–∑–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö
    if is_free_prize:
        message_text = (
            f"üéÅ *{prize['title']}*\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: {formatted_price}\n"
            f"üéü –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã:\n{formatted_tickets}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:"
        )
    else:
        message_text = (
            f"üéÅ *{prize['title']}*\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: {formatted_price}\n"
            f"üéü –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã:\n{formatted_tickets}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
        )

    await state.update_data(prize_id=prize["id"])

    await state.set_state(TicketStates.waiting_for_ticket_numbers)

    await callback.message.edit_text(
        message_text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )

    await callback.answer()


@tickets_router.message(TicketStates.waiting_for_ticket_numbers)
async def process_ticket_numbers(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–æ–≤ –±–∏–ª–µ—Ç–æ–≤.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç –∏—Ö.
    """
    user = message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.full_name}) –≤–≤–µ–ª –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤: {message.text}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    prize_id = state_data.get("prize_id")
    
    if not prize_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_back_keyboard())
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
    prize = await get_active_prize()
    
    if not prize or prize["id"] != prize_id:
        await message.answer("–†–æ–∑—ã–≥—Ä—ã—à –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=get_back_keyboard())
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à (—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ = 0)
    is_free_prize = prize["ticket_price"] is None or float(prize["ticket_price"] or 0) == 0
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    ticket_numbers = await parse_ticket_numbers(message.text)
    
    if not ticket_numbers:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    available_tickets = await get_available_tickets(prize_id)
    formatted_available = format_ticket_numbers(available_tickets)

    # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–¥–Ω–∏–º –±–∏–ª–µ—Ç–æ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_free_prize and len(ticket_numbers) > 1:
        await message.answer(
            "–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–∏–ª–µ—Ç.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã: {formatted_available}",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
    unavailable_tickets = [num for num in ticket_numbers if num not in available_tickets]
    if unavailable_tickets:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
        available_tickets = await get_available_tickets(prize_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –±–∏–ª–µ—Ç–æ–≤
        formatted_unavailable = format_ticket_numbers(unavailable_tickets)
        formatted_available = format_ticket_numbers(available_tickets)
        
        await message.answer(
            f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã: {formatted_unavailable}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã: {formatted_available}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ —Å—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
    if is_free_prize:
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user_query = select(TelegramUser).where(TelegramUser.telegram_id == user.id)
            user_result = await session.execute(user_query)
            db_user = user_result.scalar_one_or_none()
            
            if not db_user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–ª–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_cancel_keyboard()
                )
                return
            
            existing_query = select(Ticket).where(
                and_(
                    Ticket.user_id == db_user.id,
                    Ticket.prize_id == prize_id,
                    Ticket.is_paid == True
                )
            )
            existing_result = await session.execute(existing_query)
            existing_tickets = existing_result.scalars().all()
            
            if existing_tickets:
                await message.answer(
                    "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–∏–ª–µ—Ç.",
                    reply_markup=get_back_keyboard()
                )
                await state.clear()
                return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞
        ticket_number = ticket_numbers[0]
        
        # –ù–∞—Ö–æ–¥–∏–º –±–∏–ª–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É –∏ id —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        async with async_session() as session:
            ticket_query = select(Ticket).where(
                and_(
                    Ticket.prize_id == prize_id,
                    Ticket.ticket_number == ticket_number,
                    Ticket.user_id.is_(None),  # –ë–∏–ª–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    Ticket.is_paid == False
                )
            )
            ticket_result = await session.execute(ticket_query)
            ticket = ticket_result.scalar_one_or_none()
            
            if not ticket:
                await message.answer(
                    f"–ë–∏–ª–µ—Ç #{ticket_number} —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–∏–ª–µ—Ç.",
                    reply_markup=get_cancel_keyboard()
                )
                return
            
            # –û—Ç–º–µ—á–∞–µ–º –±–∏–ª–µ—Ç –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            ticket.user_id = db_user.id
            ticket.is_paid = True
            ticket.payment_id = f"free_{user.id}_{prize_id}_{datetime.now().timestamp()}"
            
            try:
                await session.commit()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç #{ticket_number} –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {prize_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞
                await message.answer(
                    f"üéâ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç!*\n\n"
                    f"üéÅ *{prize['title']}*\n\n"
                    f"üéü –í–∞—à –±–∏–ª–µ—Ç: #{ticket_number}\n\n"
                    f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!",
                    reply_markup=get_back_keyboard(),
                    parse_mode="Markdown"
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞: {e}")
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–ª–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_cancel_keyboard()
                )
                return
    
    # –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–µ–π
    # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã
    success, reserved_tickets, message_text = await reserve_tickets(prize_id, user.id, ticket_numbers)
    
    if not success:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–æ–≤: {message_text}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    ticket_price = float(prize["ticket_price"] or 0)
    total_price = len(reserved_tickets) * ticket_price
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏ –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤
    formatted_total_price = format_price(total_price)
    formatted_tickets = format_ticket_numbers(reserved_tickets)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö
    success_message = (
        f"üéÅ *{prize['title']}*\n\n"
        f"üéü –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã: {formatted_tickets}\n"
        f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {formatted_total_price}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
    sent_message = await message.answer(
        success_message,
        reply_markup=get_payment_keyboard(),
        parse_mode="Markdown"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    if user.id in reservation_timers:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
        reservation_timers[user.id].cancel()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    task = asyncio.create_task(
        cancel_reservation_after_timeout(user.id, sent_message)
    )
    reservation_timers[user.id] = task

    await state.clear()


@tickets_router.callback_query(F.data == "pay_tickets")
async def process_payment(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å".
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa.
    """
    user = callback.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.full_name}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'")
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user.id in reservation_timers:
        reservation_timers[user.id].cancel()
        del reservation_timers[user.id]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è return_url
    bot = await callback.bot.get_me()
    bot_username = bot.username
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
    async with async_session() as session:
        payment_info = await init_payment(session, user.id, bot_username)
        
        if not payment_info:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        await callback.message.edit_text(
            f"üí≥ *–û–ø–ª–∞—Ç–∞ –±–∏–ª–µ—Ç–æ–≤*\n\n"
            f"üéü –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: {payment_info['ticket_count']}\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_info['formatted_amount']}\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode="Markdown",
            reply_markup=get_payment_keyboard(payment_info["payment_url"])
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        payment_id = payment_info["payment_id"]
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
        if payment_id in payment_check_timers:
            payment_check_timers[payment_id].cancel()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        task = asyncio.create_task(
            check_payment_status_periodically(payment_id, user.id, callback.message)
        )
        payment_check_timers[payment_id] = task

        await callback.answer()
