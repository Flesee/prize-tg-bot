from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.logger import logger
from database.base import async_session
from database.models import FAQ
from keyboards import get_back_keyboard


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å FAQ
faq_router = Router()


async def get_active_faqs():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö FAQ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        from sqlalchemy.future import select
        
        async with async_session() as session:
            query = select(FAQ).where(FAQ.is_active == True).order_by(FAQ.order, FAQ.created_at)
            result = await session.execute(query)
            faqs = result.scalars().all()
            
            return [
                {
                    "id": faq.id,
                    "question": faq.question,
                    "answer": faq.answer
                }
                for faq in faqs
            ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FAQ: {e}")
        return []


def get_faq_keyboard(faqs):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ.
    """
    builder = InlineKeyboardBuilder()
    
    for faq in faqs:
        builder.button(text=faq["question"], callback_data=f"faq:{faq['id']}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="start")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
    builder.adjust(1)
    
    return builder.as_markup()


@faq_router.callback_query(F.data == "faq")
async def show_faq_list(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "FAQ".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    user = callback.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.full_name}) –æ—Ç–∫—Ä—ã–ª FAQ")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö FAQ
    faqs = await get_active_faqs()
    
    if not faqs:
        await callback.message.edit_text(
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
    message_text = "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–æ–ø—Ä–æ—Å–æ–≤
    await callback.message.edit_text(
        message_text,
        reply_markup=get_faq_keyboard(faqs),
        parse_mode="Markdown"
    )
    
    await callback.answer()


@faq_router.callback_query(F.data.startswith("faq:"))
async def show_faq_answer(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤–æ–ø—Ä–æ—Å–æ–º.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
    """
    user = callback.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    faq_id = int(callback.data.split(":")[1])
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.full_name}) –æ—Ç–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å —Å ID {faq_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö FAQ
    faqs = await get_active_faqs()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    selected_faq = next((faq for faq in faqs if faq["id"] == faq_id), None)
    
    if not selected_faq:
        await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –æ—Ç–≤–µ—Ç–æ–º
    message_text = (
        f"‚ùì *{selected_faq['question']}*\n\n"
        f"{selected_faq['answer']}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤"
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="faq")
    builder.button(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
    builder.adjust(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    
    await callback.answer() 